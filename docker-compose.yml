# Inspired by https://docs.docker.com/compose/django/
services:
  db:
    # NOTE: No persistance storage configured.
    # Using v14 to prevent schema permissions. See also docker-init-db.sql.
    # See: https://hub.docker.com/_/postgres/
    image: postgres:${PG_VERSION:-17}
    environment:
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - ./docker/init-db.sql:/docker-entrypoint-initdb.d/init_db.sql
    networks:
      - open-vtb-dev

  web:
    build: .
    image: maykinmedia/open-vtb:latest
    environment:
      DJANGO_SETTINGS_MODULE: openvtb.conf.docker
      IS_HTTPS: no
      DB_NAME: openvtb
      DB_USER: openvtb
      DB_HOST: db
      ALLOWED_HOSTS: '*'
      CACHE_DEFAULT: redis:6379/0
      CACHE_AXES: redis:6379/0
      SUBPATH: ${SUBPATH:-/}
      SECRET_KEY: ${SECRET_KEY:-django-insecure-##q31k@oa@my@(twhvqsvv#+-9x0h0@94^f9=vmxe(zzkg^mot}
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/0
      DISABLE_2FA: true
      LOG_NOTIFICATIONS_IN_DB: ${LOG_NOTIFICATIONS_IN_DB:-yes}
      DB_CONN_MAX_AGE: "0"
      DB_POOL_ENABLED: False

      # Enabling Open Telemetry requires the services in docker/docker-compose.observability.yml
      # to be up and running.
      OTEL_SDK_DISABLED: ${OTEL_SDK_DISABLED:-true}
      OTEL_RESOURCE_ATTRIBUTES: maykin.saas.client=maykin,maykin.saas.target=dev
      OTEL_METRIC_EXPORT_INTERVAL: ${OTEL_METRIC_EXPORT_INTERVAL:-60000}
      OTEL_EXPORTER_OTLP_ENDPOINT: ${OTEL_EXPORTER_OTLP_ENDPOINT:-http://otel-collector:4317}  # gRPC
      # otel:supersecret, escape spaces and = with percent encoding
      # OTEL_EXPORTER_OTLP_HEADERS: Authorization=Basic b3RlbDpzdXBlcnNlY3JldA==
      OTEL_EXPORTER_OTLP_METRICS_INSECURE: ${OTEL_EXPORTER_OTLP_METRICS_INSECURE:-true}
      _OTEL_ENABLE_CONTAINER_RESOURCE_DETECTOR: true
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; exit(requests.head('http://localhost:8000/admin/').status_code not in [200, 302])"]
      interval: 30s
      timeout: 5s
      retries: 3
      # This should allow for enough time for migrations to run before the max
      # retries have passed. This healthcheck in turn allows other containers
      # to wait for the database migrations.
      start_period: 30s
    volumes: &web_volumes
      - media:/app/media
      - private_media:/app/private_media
      - log:/app/log
    ports:
      - 8000:8000
    depends_on:
      db:
        condition: service_started
      redis:
        condition: service_started
    labels:
      client: dev
      target: test
      app: open-vtb
      service: web
    networks:
      - open-vtb-dev

  redis:
    image: redis
    networks:
      - open-vtb-dev

volumes:
  db:
  log:
  media:
  private_media:

networks:
  open-vtb-dev:
    name: open-vtb-dev
